$languageOptions = New-Object System.Collections.Specialized.OrderedDictionary
$languageOptions.Add("cs-CZ", "cs-CZ")
$languageOptions.Add("de-DE", "de-DE")
$languageOptions.Add("fr-FR", "fr-FR")
$languageOptions.Add("en-AU", "en-AU")
$languageOptions.Add("en-GB", "en-GB")
$languageOptions.Add("es-ES", "es-ES")

$result = Read-Variable -Parameters `
    @{ Name = "redirectsRootFolder"; Title="Redirects Root Folder"; Source="Datasource=/sitecore/content/Redirects"; editor="droptree"}, `
    @{ Name = "productRepositoryPath"; Title="Product Repository Path"; Source="Datasource=/sitecore/content/"; editor="droptree"}, `
    @{ Name = "languageOption"; Value="Contains"; Title="Language"; Tooltip="Select Item Language"; editor="radio"; options=$languageOptions}  `
    -Description "Search and replace vars:" -Title "Search and Replace" -Width 500 -Height 480 -OkButtonName "Proceed" -CancelButtonName "Abort"
if($result -ne "ok")
{
    Exit
}

$redirects = Get-ChildItem -Path ("master:/" + $redirectsRootFolder.Paths.Path) -Language $languageOption
$products = Get-ChildItem -Path ("master:/" + $productRepositoryPath.Paths.Path) -Language $languageOption | Get-ChildItem

$number = 1
$report = [string]@()
$productsList = [System.Collections.ArrayList]@()
$report += "--- All $languageOption Products ---`n"
foreach($product in $products){
    $t4n = $product.DisplayName
    $t4i = $product.Code
    $t4e = $product.EAN
    $productRecord = [PSCustomObject]@{
        "Number" = $number
        "Name" = $product.DisplayName
        "ID" = $product.Code
        "EAN" = $product.EAN
        }
    $productsList.Add($productRecord) > $null
    $report += "`n$number  Name - $t4n, ID - $t4i, EAN - $t4e"
    $number ++
}
# Write-Host "`nAll $languageOption Products" -ForegroundColor Green
# $productsList | Format-table
# $productIDCodeList | Show-ListView

$number = 1
$redirectRules = [System.Collections.ArrayList]@()
$report += "`n`n--- All Redirect Rules ---`n"
foreach($redirectRule in $redirects) {
    $rP = $redirectRule.Path
    $rT = $redirectRule.Target
        $redirectRecord = [PSCustomObject]@{
        "Num" = $number
        "Path" = $rP
        "Target" = $rT
        }
    $redirectRules.Add($redirectRecord) > $null
    $report += "`n$number  Path - $rP, Target - $rT"
    $number ++
}
Write-Host "`nAll Redirect Rules" -ForegroundColor Green
$redirectRules | Format-table

$number = 1
$allProductRedirectRules = [System.Collections.ArrayList]@()
$report += "`n`n--- All Product Redirect Rules ---`n"
foreach($allProductRedirectRule in $redirects) {
    $aP = $allProductRedirectRule.Path
    $aT = $allProductRedirectRule.Target
    if(($aP.Contains("0000000000")) -or ($aT.Contains("0000000000"))){
        $allProductRedirectRecord = [PSCustomObject]@{
        "Num" = $number
        "Path" = $aP
        "Target" = $aT
        }
        $allProductRedirectRules.Add($allProductRedirectRecord) > $null
    $report += "`n$number  Path - $aP, Target - $aT"
    $number ++
    }
}
Write-Host "`nAll Product Redirect Rules" -ForegroundColor Green
$allProductRedirectRules | Format-table

$number = 1
$oldProductRedirectRules = [System.Collections.ArrayList]@()
$report += "`n`n--- Old Product Redirect Rules ---`n"
foreach($oldProductRedirectRule in $redirects) {
    $oP = $oldProductRedirectRule.Path
    $oT = $oldProductRedirectRule.Target
    if($oT.Contains("0000000000")){
        $oldProductRedirectRecord = [PSCustomObject]@{
        "Num" = $number
        "Path" = $oP
        "Target" = $oT
        }
        $oldProductRedirectRules.Add($oldProductRedirectRecord) > $null
    $report += "`n$number  Path - $oP, Target - $oT"
    $number ++
    }
}
Write-Host "`nOld Product Redirect Rules" -ForegroundColor Green
$oldProductRedirectRules | Format-table

$number = 1
$errNumber = 1
$createRedirectRuleList = [System.Collections.ArrayList]@()
$errorList = [System.Collections.ArrayList]@()
$report += "`n`n--- New ID EAN Redirect Rules ---`n"
foreach($redirect in $redirects) {
    $redirectPath = $redirect.Path
    $redirectTarget = $redirect.Target
    $redirectID = $redirectTarget.Replace('" />','').Replace('<link linktype="external" ','').Split('/')[-1]
    $redirectEAN = $redirectPath.Replace('" />','').Replace('<link linktype="external" ','').Split('/')[-1]
    if(($redirectTarget.Contains("0000000000")) -And (!$redirectEAN.StartsWith("40"))){
        foreach($productItem in $productsList){
            if($productItem.ID -eq $redirectID){
                $displayName = $redirect.DisplayName
                $newClone = New-ItemClone -Path $redirect.Paths.Path -Destination $redirectsRootFolder -Name "$displayName - ID to EAN" -ErrorAction SilentlyContinue -ErrorVariable myError
                if(($myError.Count -eq 0) -and (!$newClone.DisplayName.Contains("- ID to EAN - ID to EAN"))){
                    $item = Get-Item $newClone.Paths.Path -Language $languageOption
                    $item.Editing.BeginEdit()
                    $item.Path = $redirectTarget 
                    $item.Target = $redirectTarget.Replace($redirectID, $productItem.EAN)
                    $item.Editing.EndEdit()
                
                    $nP = $item.Path
                    $nT = $item.Target
                    $createRedirectRuleRecord = [PSCustomObject]@{
                        "Num" = $number
                        "Path" = $item.Path
                        "Target" = $item.Target
                    }
                    $createRedirectRuleList.Add($createRedirectRuleRecord) > $null
                    $report += "`n$number new ID EAN redirect rule - Path $nP, Target $nT"
                    $number ++
                }
                if($myError.Count -gt 0){
                    $errorText = $myError[0].Message
                    
                     $errorRecord = [PSCustomObject]@{
                        "Num" = $errNumber
                        "Descroption" = $errorText
                    }
                    $errorList.Add($errorRecord) > $null
                    $report += "`n$errorText"
                    $errNumber ++
                }
            }
        }
    }
}
Write-Host "`nNew ID EAN Redirect Rules" -ForegroundColor Green
$createRedirectRuleList | Format-table
Write-Host "`nErrors during Redirect clone" -ForegroundColor Green
$errorList | Format-table

$redirects = Get-ChildItem -Path ("master:/" + $redirectsRootFolder.Paths.Path) -Language $languageOption
$number = 1
$idEANRedirectRuleList = [System.Collections.ArrayList]@()
$report += "`n`n--- All ID EAN Redirect Rules ---`n"
foreach($redirect in $redirects) {
    $redirectPath = $redirect.Path
    $redirectTarget = $redirect.Target
    $pathID = $redirectPath.Replace('" />','').Replace('<link linktype="external" ','').Split('/')[-1]
    $targetID = $redirectTarget.Replace('" />','').Replace('<link linktype="external" ','').Split('/')[-1]
    if(($redirectPath.Contains("00000000")) -And ($targetID.StartsWith("40"))){
        $idEANRedirectRuleRecord = [PSCustomObject]@{
                    "Num" = $number
                    "Path" = $redirectPath
                    "Target" = $redirectTarget
                }
        $idEANRedirectRuleList.Add($idEANRedirectRuleRecord) > $null
        $report += "`n$number ID EAN redirect rule already exists - Path $redirectPath, Target $redirectTarget"
        $number ++
    }
}
Write-Host "`nAll ID EAN Redirect Rules" -ForegroundColor Green
$idEANRedirectRuleList | Format-table

$number = 1
$redirectRuleProblems = [System.Collections.ArrayList]@()
$redirectRuleDiff = [System.Collections.ArrayList]@()
$report += "`n`nRedirect Rules Problems`n"
$oldR = [System.Collections.ArrayList]@()
$existR = [System.Collections.ArrayList]@()
foreach($oldRedirect in $oldProductRedirectRules) {
    $oldR.Add($oldRedirect.Target) > $null
}
foreach($existRedirect in $idEANRedirectRuleList){
    $existR.Add($existRedirect.Path) > $null
}
$redirectRuleDiff = ($oldR | Where {$existR -NotContains $_}) + ($existR | Where {$oldR -NotContains $_})
foreach($redirectRuleProblem in $redirectRuleDiff){
    $pTarget = $redirectRuleProblem.Replace('" />','').Replace('<link linktype="external" ','')
    $ID = $pTarget.Split('/')[-1]
    $redirectRuleProblemRecord = [PSCustomObject]@{
            "Num" = $number
            "Target" = $redirectRuleProblem.Replace('" />','').Replace('<link linktype="external" ','')
            "Description" = "Product ID - $ID not found in Product Repository"
    }
    $redirectRuleProblems.Add($redirectRuleProblemRecord) > $null
    $report += "`n$number  Product ID - $ID not found in Product Repository"
    $number ++
}
Write-Host "`n---Redirect Rule Problems ---" -ForegroundColor Green
$redirectRuleProblems | Format-table

Write-Host "Report Out-Download`n" -ForegroundColor Green
$report | Out-Download -Name "report-$languageOption $(Get-Date -format 'MM/dd/yyyy HH:mm').txt"
