$languageOptions = New-Object System.Collections.Specialized.OrderedDictionary
$languageOptions.Add("cs-CZ", "cs-CZ")
$languageOptions.Add("de-DE", "de-DE")
$languageOptions.Add("fr-FR", "fr-FR")
$languageOptions.Add("en-AU", "en-AU")
$languageOptions.Add("en-GB", "en-GB")
$languageOptions.Add("es-ES", "es-ES")

$result = Read-Variable -Parameters `
    @{ Name = "redirectsRootFolder"; Title="Redirects Root Folder"; Source="Datasource=/sitecore/content/Redirects"; editor="droptree"}, `
    @{ Name = "productRepositoryPath"; Title="Product Repository Path"; Source="Datasource=/sitecore/content/"; editor="droptree"}, `
    @{ Name = "languageOption"; Value="Contains"; Title="Language"; Tooltip="Select Item Language"; editor="radio"; options=$languageOptions}  `
    -Description "Search and replace vars:" -Title "Search and Replace" -Width 500 -Height 480 -OkButtonName "Proceed" -CancelButtonName "Abort"
if($result -ne "ok")
{
    Exit
}

$redirects = Get-ChildItem -Path ("master:/" + $redirectsRootFolder.Paths.Path) -Language $languageOption
$products = Get-ChildItem -Path ("master:/" + $productRepositoryPath.Paths.Path) -Language $languageOption | Get-ChildItem

$number = 1
$report = [string]@()
$productsList = [System.Collections.ArrayList]@()
$report += "Products`n"
foreach($product in $products){
    $t4n = $product.DisplayName
    $t4i = $product.Code
    $t4e = $product.EAN
    $productRecord = [PSCustomObject]@{
        "Number" = $number
        "Name" = $product.DisplayName
        "ID" = $product.Code
        "EAN" = $product.EAN
        }
    $productsList.Add($productRecord) > $null
    $report += "`n$number  Name - $t4n, ID - $t4i, EAN - $t4e"
    $number ++
}
#  Write-Host "`nProduct List" -ForegroundColor Green
#  $productsList | Format-table
# $productIDCodeList | Show-ListView

$number = 1
$redirectRules = [System.Collections.ArrayList]@()
$report += "`n`nRedirect Rules`n"
foreach($redirect in $redirects) {
    $rP = $redirect.Path
    $rT = $redirect.Target
        $redirectRecord = [PSCustomObject]@{
        "Num" = $number
        "Path" = $redirect.Path
        "Target" = $redirect.Target
        }
    $redirectRules.Add($redirectRecord) > $null
    $report += "`n$number  Path - $rP, Target - $rT"
    $number ++
}
Write-Host "`nRedirect Rules" -ForegroundColor Green
$redirectRules | Format-table

$number = 1
$redirectRuleCreateList = [System.Collections.ArrayList]@()
$report += "`n`nRedirect Rules After Update`n"
foreach($redirect in $redirects) {
    $redirectTarget = $redirect.Target
    if($redirectTarget.Contains("0000000000")){
        $redirectID = $redirectTarget.Replace('" />','').Replace('<link linktype="external" ','').Split('/')[-1]
        foreach($productItem in $productsList){
            if($productItem.ID -eq $redirectID){
                $displayName = $redirect.DisplayName
                $newClone = New-ItemClone -Path $redirect.Paths.Path -Destination $redirectsRootFolder -Name "$displayName - ID to EAN"
                
                $item = Get-Item $newClone.Paths.Path -Language $languageOption
                $item.Editing.BeginEdit()
                $item.Path = $redirectTarget 
                $item.Target = $redirectTarget.Replace($redirectID, $productItem.EAN)
                $item.Editing.EndEdit()
                
                $nP = $item.Path
                $nT = $item.Target
                $updateRecord = [PSCustomObject]@{
                    "Num" = $number
                    "Path" = $item.Path
                    "Target" = $item.Target
                }
                $redirectRuleCreateList.Add($updateRecord) > $null
                $report += "`n$number new redirect rule - Path $nP, Target $nT"
                $number ++
            }
        }
    }
}
Write-Host "`nID EAN Redirect Rules" -ForegroundColor Green
$redirectRuleCreateList | Format-table
# $redirectRulesCreate | Show-ListView

$number = 1
$redirectRulesProblems = [System.Collections.ArrayList]@()
$report += "`n`nRedirect Rules Problems`n"
foreach($redirect in $redirects) {
    $redirectTarget = $redirect.Target
    if($redirectTarget.Contains("0000000000")){
        foreach($redirectCreate in $redirectRuleCreateList){
            if(($redirectTarget -ne $redirectCreate.Path) -and ($redirectTarget -ne $redirectCreate.Target)){
                # Write-Host $number - "Product ID not found for " $redirect.Target
                $rTarget = $redirectTarget.Replace('" />','').Replace('<link linktype="external" ','')
                $rID = $rTarget.Split('/')[-1]
                $updateProblemRecord = [PSCustomObject]@{
                        "Num" = $number
                        "Target" = $redirect.Target.Replace('" />','').Replace('<link linktype="external" ','')
                        "Description" = "Product ID - $rID not found"
                    }
                $redirectRulesProblems.Add($updateProblemRecord) > $null
                $report += "`n$number  Product ID - $rID not found for $rTarget"
                $number ++
            }
        }
    }
}
Write-Host "`nRedirect Rule Problems" -ForegroundColor Green
$redirectRulesProblems | Format-table
# $redirectRulesProblems | Show-ListView
Write-Host "Search started $(Get-Date -format 'u')" -ForegroundColor Green
$report | Out-Download -Name "report-$languageOption $(Get-Date -format 'MM/dd/yyyy HH:mm').txt"
