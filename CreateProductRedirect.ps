function get-sanitizedUTF8Input{
    Param(
        [String]$inputString
    )
    $replaceTable = @{"®"="";"ß"="ss";"à"="a";"á"="a";"â"="a";"ã"="a";"ä"="a";"å"="a";"æ"="ae";"ç"="c";"è"="e";"é"="e";"ê"="e";"ë"="e";"ì"="i";"í"="i";"î"="i";"ï"="i";"ð"="d";"ñ"="n";"ò"="o";"ó"="o";"ô"="o";"õ"="o";"ö"="o";"ø"="o";"ù"="u";"ú"="u";"û"="u";"ü"="u";"ý"="y";"þ"="p";"ÿ"="y";"č"="c";"ě"="e";"ž"="z";"š"="s"}

    foreach($key in $replaceTable.Keys){
        $inputString = $inputString.Replace($key,$replaceTable.$key)
    }
    $inputString = $inputString -replace '[^a-zA-Z0-9\s]', ''
    return $inputString
}

$languageOptions = New-Object System.Collections.Specialized.OrderedDictionary
$languageOptions.Add("en-GB", "en-GB")
$languageOptions.Add("fr-FR", "fr-FR")
$languageOptions.Add("cs-CZ", "cs-CZ")
$languageOptions.Add("de-DE", "de-DE")
$languageOptions.Add("es-ES", "es-ES")
$languageOptions.Add("en-AU", "en-AU")

$websiteOptions = New-Object System.Collections.Specialized.OrderedDictionary
$websiteOptions.Add("UK", "https://uk")
$websiteOptions.Add("FR", "https://fr")
$websiteOptions.Add("CZ", "https://cs")
$websiteOptions.Add("DE", "https://de/shop")
$websiteOptions.Add("ES", "https://es")
$websiteOptions.Add("AU", "https://au")

$result = Read-Variable -Parameters `
    @{ Name = "redirectsRootFolder"; Title="Redirects Root Folder"; Source="Datasource=/sitecore/content/Redirects"; editor="droptree"}, `
    @{ Name = "productRepositoryPath"; Title="Product Repository Path"; Source="Datasource=/sitecore/content/"; editor="droptree"}, `
    @{ Name = "languageOption"; Value="Contains"; Title="Language"; Tooltip="Select Item Language"; editor="radio"; options=$languageOptions}, `
    @{ Name = "websiteOption"; Value="Contains"; Title="Website"; Tooltip="Select Website URL"; editor="radio"; options=$websiteOptions}  `
    -Description "Search and replace vars:" -Title "Search and Replace" -Width 500 -Height 480 -OkButtonName "Proceed" -CancelButtonName "Abort"
if($result -ne "ok")
{
    Exit
}

$redirects = Get-ChildItem -Path ("master:/" + $redirectsRootFolder.Paths.Path) -Language $languageOption
$products = Get-ChildItem -Path ("master:/" + $productRepositoryPath.Paths.Path) -Language $languageOption | Get-ChildItem

$number = 1
$report = [string]@()
$productsList = [System.Collections.ArrayList]@()
$report += "--- All $languageOption Products ---`n"
foreach($product in $products){
    $t4n = $product.DisplayName
    $t4i = $product.Code
    $t4e = $product.EAN
    $productRecord = [PSCustomObject]@{
        "Number" = $number
        "Name" = $product.DisplayName
        "ID" = $product.Code
        "EAN" = $product.EAN
        }
    $productsList.Add($productRecord) > $null
    $report += "`n$number  Name - $t4n, ID - $t4i, EAN - $t4e"
    $number ++
}
Write-Host "`nAll $languageOption Products" -ForegroundColor Green
$productsList | Format-table
# $productIDCodeList | Show-ListView

$number = 1
$redirectRules = [System.Collections.ArrayList]@()
$report += "`n`n--- All Redirect Rules ---`n"
foreach($redirectRule in $redirects) {
    $rP = $redirectRule.Path
    $rT = $redirectRule.Target
        $redirectRecord = [PSCustomObject]@{
        "Num" = $number
        "Path" = $rP
        "Target" = $rT
        }
    $redirectRules.Add($redirectRecord) > $null
    $report += "`n$number  Path - $rP, Target - $rT"
    $number ++
}
Write-Host "`nAll Redirect Rules" -ForegroundColor Green
$redirectRules | Format-table

$websiteOption
$number = 1
$errNumber = 1
$warnNumber = 1
$createRedirectRuleList = [System.Collections.ArrayList]@()
$errorList = [System.Collections.ArrayList]@()
$report += "`n`n--- New ID EAN Redirect Rules ---`n"
$redirectPathsPath = $redirects[0].Paths.Path
if($redirectPathsPath -eq $null)
{
    $redirectPathsPath = $redirects.Paths.Path
}
foreach($product in $products){
    $productID = $product.Code
    $productEAN = $product.EAN
    $productDisplayName = get-sanitizedUTF8Input -inputString $product.DisplayName
    
    if($productID -eq ""){
        $report += "`n$warnNumber - Warning - $productDisplayName - productID - $productID is empty, productEAN - $productEAN"
        $warnNumber ++
        continue
    }
     if($productEAN -eq ""){
        $report += "`n$warnNumber - Warning - $productDisplayName - productEAN - $productEAN is empty, productID - $productID"
        $warnNumber ++
        continue
    }
    if($productDisplayName.Length -gt 35){
        $productDisplayName = $productDisplayName.Substring(0,35).Trim()
    }
    
    $productDisplayName = $productDisplayName.Replace(" "," ")
    $redirectName = "$productDisplayName - $productID to $productEAN"
    $parentItem = Get-Item $product.Paths.ParentPath -Language $languageOption
    $parentItemDisplayName = get-sanitizedUTF8Input -inputString $parentItem.DisplayName
    $parentItemDisplayName = $parentItemDisplayName.Replace(" ","-")
    $path = "$websiteOption/$parentItemDisplayName"
    $base = '<link linktype="external"'
    $newRedirectPath = "$parentItemDisplayName/$productID" #shop/ for DE
    $newRedirectTarget = "$base url='$path/$productEAN' />"
    
    $redirectNameTrim = $redirectName.Trim()
    $redirectsRootFolderPathsPath = $redirectsRootFolder.Paths.Path
    $newRedirectPathName = "$redirectsRootFolderPathsPath/$redirectNameTrim"
    # $newClone = New-ItemClone -Path $redirectPathsPath -Destination $redirectsRootFolder -Name $redirectName.Trim() -ErrorAction SilentlyContinue -ErrorVariable myError
    Copy-Item -Path $redirectPathsPath -Destination $newRedirectPathName -ErrorAction SilentlyContinue -ErrorVariable myError
    
    if($myError.Count -eq 0){
        $item = Get-Item $newRedirectPathName -Language $languageOption
        $itemPath = $item.Path
        $itemTarget = $item.Target
        
        $item.Editing.BeginEdit()
        $item.Path = $newRedirectPath.ToLower() 
        $item.Target = $newRedirectTarget.ToLower()
        $item.Editing.EndEdit()
                
        $nP = $item.Path
        $nT = $item.Target
        $createRedirectRuleRecord = [PSCustomObject]@{
            "Num" = $number
            "Path" = $item.Path
            "Target" = $item.Target
        }
        $createRedirectRuleList.Add($createRedirectRuleRecord) > $null
        $report += "`n$number - Info - $productDisplayName - new ID EAN redirect rule - Path $nP, Target $nT"
        $number ++
    }
    if($myError.Count -gt 0){
        $errorText = $myError[0].Message
        $errorRecord = [PSCustomObject]@{
            "Num" = $errNumber
            "Descroption" = "$productDisplayName - $errorText"
        }
        $errorList.Add($errorRecord) > $null
        $report += "`n$errNumber - Error - $productDisplayName - $errorText"
        $errNumber ++
    }
    
    $child = Get-ChildItem -Path $newRedirectPathName -Recurse
    if($child.Count -gt 0){
        $childPath = $child.Paths.Path
        Get-Item -Path $childPath | Remove-Item
    }
}
Write-Host "`nNew ID EAN Redirect Rules" -ForegroundColor Green
$createRedirectRuleList | Format-table
Write-Host "`nErrors during Redirect clone" -ForegroundColor Green
$errorList | Format-table
Write-Host "Report Out-Download`n" -ForegroundColor Green
$report | Out-Download -Name "report-$languageOption $(Get-Date -format 'MM/dd/yyyy HH:mm').txt"